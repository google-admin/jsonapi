// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package fastjsonapi

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonCdfae1c8DecodeGithubComGofuryJsonapi(in *jlexer.Lexer, out *RelationshipManyNode) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Data = make([]*Node, 0, 8)
			} else {
				out.Data = nil
			}
			for !in.IsDelim(']') {
				var v1 *Node
				if in.IsNull() {
					in.Skip()
					v1 = nil
				} else {
					v1 = new(Node)
					(*v1).UnmarshalEasyJSON(in)
				}
				out.Data = append(out.Data, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				out.Links = new(map[string]string)
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Links = make(map[string]string)
					} else {
						*out.Links = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v2 string
						v2 = string(in.String())
						(*out.Links)[key] = v2
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComGofuryJsonapi(out *jwriter.Writer, in RelationshipManyNode) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.RawByte('[')
	for v3, v4 := range in.Data {
		if v3 > 0 {
			out.RawByte(',')
		}
		if v4 == nil {
			out.RawString("null")
		} else {
			(*v4).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if in.Links != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"links\":")
		if in.Links == nil {
			out.RawString("null")
		} else {
			if *in.Links == nil {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v5First := true
				for v5Name, v5Value := range *in.Links {
					if !v5First {
						out.RawByte(',')
					}
					v5First = false
					out.String(string(v5Name))
					out.RawByte(':')
					out.String(string(v5Value))
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RelationshipManyNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RelationshipManyNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RelationshipManyNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RelationshipManyNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi(l, v)
}
func easyjsonCdfae1c8DecodeGithubComGofuryJsonapi1(in *jlexer.Lexer, out *RelationshipOneNode) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = new(Node)
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				out.Links = new(map[string]string)
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Links = make(map[string]string)
					} else {
						*out.Links = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v6 string
						v6 = string(in.String())
						(*out.Links)[key] = v6
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComGofuryJsonapi1(out *jwriter.Writer, in RelationshipOneNode) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil {
		out.RawString("null")
	} else {
		(*in.Data).MarshalEasyJSON(out)
	}
	if in.Links != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"links\":")
		if in.Links == nil {
			out.RawString("null")
		} else {
			if *in.Links == nil {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v7First := true
				for v7Name, v7Value := range *in.Links {
					if !v7First {
						out.RawByte(',')
					}
					v7First = false
					out.String(string(v7Name))
					out.RawByte(':')
					out.String(string(v7Value))
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RelationshipOneNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RelationshipOneNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RelationshipOneNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RelationshipOneNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi1(l, v)
}
func easyjsonCdfae1c8DecodeGithubComGofuryJsonapi2(in *jlexer.Lexer, out *Node) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "client-id":
			out.ClientID = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(map[string]interface{})
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 interface{}
					v8 = in.Interface()
					(out.Attributes)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "relationships":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Relationships = make(map[string]interface{})
				} else {
					out.Relationships = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 interface{}
					v9 = in.Interface()
					(out.Relationships)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComGofuryJsonapi2(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if in.ClientID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"client-id\":")
		out.String(string(in.ClientID))
	}
	if len(in.Attributes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"attributes\":")
		if in.Attributes == nil {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Attributes {
				if !v10First {
					out.RawByte(',')
				}
				v10First = false
				out.String(string(v10Name))
				out.RawByte(':')
				out.Raw(json.Marshal(v10Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Relationships) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"relationships\":")
		if in.Relationships == nil {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Relationships {
				if !v11First {
					out.RawByte(',')
				}
				v11First = false
				out.String(string(v11Name))
				out.RawByte(':')
				out.Raw(json.Marshal(v11Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi2(l, v)
}
func easyjsonCdfae1c8DecodeGithubComGofuryJsonapi3(in *jlexer.Lexer, out *ManyPayload) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Data = make([]*Node, 0, 8)
			} else {
				out.Data = nil
			}
			for !in.IsDelim(']') {
				var v12 *Node
				if in.IsNull() {
					in.Skip()
					v12 = nil
				} else {
					v12 = new(Node)
					(*v12).UnmarshalEasyJSON(in)
				}
				out.Data = append(out.Data, v12)
				in.WantComma()
			}
			in.Delim(']')
		case "included":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Included = make([]*Node, 0, 8)
			} else {
				out.Included = nil
			}
			for !in.IsDelim(']') {
				var v13 *Node
				if in.IsNull() {
					in.Skip()
					v13 = nil
				} else {
					v13 = new(Node)
					(*v13).UnmarshalEasyJSON(in)
				}
				out.Included = append(out.Included, v13)
				in.WantComma()
			}
			in.Delim(']')
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				out.Links = new(map[string]string)
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Links = make(map[string]string)
					} else {
						*out.Links = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v14 string
						v14 = string(in.String())
						(*out.Links)[key] = v14
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComGofuryJsonapi3(out *jwriter.Writer, in ManyPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.RawByte('[')
	for v15, v16 := range in.Data {
		if v15 > 0 {
			out.RawByte(',')
		}
		if v16 == nil {
			out.RawString("null")
		} else {
			(*v16).MarshalEasyJSON(out)
		}
	}
	out.RawByte(']')
	if len(in.Included) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"included\":")
		out.RawByte('[')
		for v17, v18 := range in.Included {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				(*v18).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if in.Links != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"links\":")
		if in.Links == nil {
			out.RawString("null")
		} else {
			if *in.Links == nil {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v19First := true
				for v19Name, v19Value := range *in.Links {
					if !v19First {
						out.RawByte(',')
					}
					v19First = false
					out.String(string(v19Name))
					out.RawByte(':')
					out.String(string(v19Value))
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManyPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManyPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManyPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManyPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi3(l, v)
}
func easyjsonCdfae1c8DecodeGithubComGofuryJsonapi4(in *jlexer.Lexer, out *OnePayload) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = new(Node)
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "included":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Included = make([]*Node, 0, 8)
			} else {
				out.Included = nil
			}
			for !in.IsDelim(']') {
				var v20 *Node
				if in.IsNull() {
					in.Skip()
					v20 = nil
				} else {
					v20 = new(Node)
					(*v20).UnmarshalEasyJSON(in)
				}
				out.Included = append(out.Included, v20)
				in.WantComma()
			}
			in.Delim(']')
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				out.Links = new(map[string]string)
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					if !in.IsDelim('}') {
						*out.Links = make(map[string]string)
					} else {
						*out.Links = nil
					}
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v21 string
						v21 = string(in.String())
						(*out.Links)[key] = v21
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCdfae1c8EncodeGithubComGofuryJsonapi4(out *jwriter.Writer, in OnePayload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	if in.Data == nil {
		out.RawString("null")
	} else {
		(*in.Data).MarshalEasyJSON(out)
	}
	if len(in.Included) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"included\":")
		out.RawByte('[')
		for v22, v23 := range in.Included {
			if v22 > 0 {
				out.RawByte(',')
			}
			if v23 == nil {
				out.RawString("null")
			} else {
				(*v23).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	if in.Links != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"links\":")
		if in.Links == nil {
			out.RawString("null")
		} else {
			if *in.Links == nil {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v24First := true
				for v24Name, v24Value := range *in.Links {
					if !v24First {
						out.RawByte(',')
					}
					v24First = false
					out.String(string(v24Name))
					out.RawByte(':')
					out.String(string(v24Value))
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdfae1c8EncodeGithubComGofuryJsonapi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdfae1c8DecodeGithubComGofuryJsonapi4(l, v)
}
